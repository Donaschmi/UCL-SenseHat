from math import inf

"""
Function that finds the peaks in a sequence of numbers stored in an array
 Use for step detection, you should apply a simple filter to remove low(uncorrect) peaks as done at the end of the file

""""
def findpeaks(data_array):
	position = 0 # not use but culd be usefull
	previous = data_array[0]
	direction = "up"
	peaks = []
	for element in data_array:
		print(element)
		if element > previous: # data is ascending
			if direction == "down": # but was descending
				peaks.append(element)
				direction = "up"
			else:
				pass
		elif element < previous: # data is descending
			if direction == "up": # but was ascending
				peaks.append(element)
				direction = "down"
			else:
				pass
		position += 1
		previous = element
	print(peaks)
	return peaks

"""
 Real data of a person who walked +-23 steps
 	Raspberry was half in side pocket with USB/ethernet ports Upward
 	572 values for 10 seconds of data. Each point is a magnitude value (sqrt(x^2+y^2+z^2)) where x,y,z are accelerometer data
"""
data = [1.05105,   1.15258,   1.27492,   1.32592,   1.19502,   1.17877,   1.17444,   1.14278,   1.20759,   1.15701,   1.07025,   1.09375,   1.10524,   1.16078,   1.18692,   1.10534,   0.95213,   0.79535,   0.75159,   0.72520,   0.74545,   0.76634,   0.80975,   0.79791,   0.79214,   0.74420,   0.76516,   0.80824,   0.85965,   0.96993,   1.10189,   1.16766,   1.38682,   1.53524,   1.43632,   1.01881,   0.75140,   1.41029,   1.51546,   0.90343,   0.79176,   1.34467,   1.19295,   0.87333,   0.76295,   0.82182,   0.91896,   1.03416,   0.95052,   0.91859,   0.90293,   0.89567,   0.86112,   0.90588,   0.93211,   0.93170,   0.94396,   0.96257,   0.96029,   0.91972,   0.91705,   0.95233,   0.98514,   1.03921,   1.12551,   1.17494,   1.13472,   1.12590,   1.09326,   1.12485,   1.16137,   1.46708,   1.31985,   1.24064,   1.18402,   1.16590,   1.17017,   1.09631,   0.97443,   0.86459,   0.96639,   1.16450,   1.22730,   1.14153,   1.05029,   0.97099,   0.90854,   0.85092,   0.87146,   0.88269,   0.85269,   0.84094,   0.83374,   0.83961,   0.86316,   0.83120,   0.81772,   0.84037,   0.84948,   0.97336,   1.02067,   1.06887,   1.11600,   1.16809,   1.24727,   1.21034,   1.15040,   0.91725,   1.52034,   1.67152,   1.18653,   0.90526,   1.05432,   0.89257,   0.78184,   0.77291,   0.90048,   1.11551,   1.08780,   0.89274,   0.82857,   0.88703,   0.86859,   0.84514,   0.89170,   0.98299,   1.02344,   1.01125,   0.94438,   0.91435,   0.92754,   0.97325,   1.01992,   0.99821,   0.97837,   1.04483,   1.13239,   1.16530,   1.15257,   1.13500,   1.20520,   1.27421,   1.37226,   1.15624,   1.16720,   1.12228,   1.00530,   0.94694,   1.13437,   1.16224,   1.19973,   1.22976,   1.18480,   1.15246,   0.97024,   0.81348,   0.76128,   0.71772,   0.68483,   0.85312,   0.88490,   0.83077,   0.80197,   0.82550,   0.79051,   0.76375,   0.78597,   0.90040,   0.99840,   1.11241,   1.27387,   1.40392,   1.46471,   1.53223,   1.69427,   1.35746,   0.81984,   0.68215,   0.73418,   0.89833,   0.97755,   1.00412,   1.12685,   1.05435,   0.87867,   0.80225,   0.89105,   0.98441,   0.98661,   0.93169,   0.93471,   0.88408,   0.87439,   0.91190,   0.94909,   0.99536,   0.99540,   0.93872,   0.91545,   0.96210,   1.00682,   1.02676,   1.02697,   1.01961,   1.01046,   1.18050,   1.18623,   1.11177,   1.16769,   1.41914,   1.33839,   1.28609,   1.25981,   1.21248,   1.04796,   1.05086,   1.08035,   1.05020,   1.07740,   1.10103,   1.16417,   1.09614,   1.00269,   0.90559,   0.82408,   0.71126,   0.67621,   0.71537,   0.71116,   0.76659,   0.77292,   0.74753,   0.72604,   0.78271,   0.84276,   0.97749,   1.20124,   1.35352,   1.51732,   1.59587,   1.32746,   1.23506,   1.32553,   1.07763,   0.75176,   0.89491,   1.08966,   1.05294,   1.00910,   0.92320,   0.87099,   0.79929,   0.91350,   1.02410,   1.00914,   0.93890,   0.93433,   0.92492,   0.85071,   0.85017,   0.87530,   0.95103,   1.02561,   1.00185,   0.94047,   0.94745,   0.95962,   0.99623,   1.05451,   1.09910,   1.13212,   1.12199,   1.08125,   1.04156,   1.07154,   1.23726,   1.44098,   1.38694,   1.27494,   1.27184,   1.08276,   0.98076,   1.07046,   1.11460,   1.16782,   1.10684,   1.10685,   1.09110,   1.00197,   0.90249,   0.84164,   0.75505,   0.75272,   0.80690,   0.77529,   0.80539,   0.81298,   0.78069,   0.71387,   0.73178,   0.74636,   0.80751,   1.00262,   1.16349,   1.26923,   1.61534,   1.55312,   1.28830,   1.02564,   1.47610,   1.41556,   0.74811,   0.56648,   0.98350,   1.13812,   1.10898,   1.03754,   0.98490,   0.74307,   0.75780,   0.97977,   1.07288,   1.02670,   0.94607,   0.89285,   0.85877,   0.85225,   0.85943,   0.92340,   0.99452,   0.98080,   0.93236,   0.90969,   0.96338,   1.04580,   1.01106,   1.05337,   1.10868,   1.10322,   1.08435,   1.15211,   1.10898,   1.12500,   1.21045,   1.26275,   1.24744,   1.29620,   1.24137,   1.17068,   0.94175,   1.03313,   1.05496,   1.11884,   1.19645,   1.19476,   1.14902,   1.07877,   0.95214,   0.87736,   0.84476,   0.73030,   0.67270,   0.77667,   0.81134,   0.87038,   0.83518,   0.74324,   0.70719,   0.73256,   0.83859,   0.91706,   1.00176,   1.06999,   1.16392,   1.46814,   1.50319,   1.39497,   1.10614,   1.42086,   1.33573,   1.03810,   0.72136,   0.90648,   1.15468,   1.11229,   1.03685,   0.99904,   0.82181,   0.78023,   0.99729,   1.09503,   1.00371,   0.94550,   0.87241,   0.89811,   0.89354,   0.91858,   0.96880,   1.00519,   1.01689,   0.95286,   0.91535,   0.94945,   0.99429,   1.03380,   1.04367,   1.04543,   1.09023,   1.13636,   1.02068,   0.97094,   1.04516,   1.08793,   1.14385,   1.23949,   1.25449,   1.31930,   1.28618,   1.20829,   1.07046,   0.92260,   0.98964,   1.03072,   1.19678,   1.22568,   1.20483,   1.09387,   0.98596,   0.90391,   0.84328,   0.76975,   0.70294,   0.71831,   0.80742,   0.84651,   0.83002,   0.79751,   0.81399,   0.85705,   0.87998,   0.90800,   0.92422,   0.98957,   1.10497,   1.26587,   1.29203,   1.29946,   1.14220,   1.15787,   1.45444,   1.43334,   0.98646,   0.89306,   0.91643,   0.92310,   0.81105,   0.88730,   1.04762,   0.89859,   0.91223,   1.08474,   0.99091,   0.94068,   0.91177,   0.91873,   0.92108,   0.91793,   0.91042,   0.90072,   0.94067,   0.98614,   0.98960,   0.94327,   0.90701,   0.90086,   0.95914,   1.03687,   1.08224,   1.14406,   1.14161,   1.06506,   1.07670,   1.11739,   1.15342,   1.36993,   1.32090,   1.32882,   1.27644,   1.24457,   1.03465,   0.91427,   0.80508,   0.88590,   1.12139,   1.21749,   1.15952,   1.19240,   1.12695,   1.03551,   0.92859,   0.81399,   0.76949,   0.77249,   0.84333,   0.80504,   0.79064,   0.79892,   0.84633,   0.81136,   0.83565,   0.80375,   0.86075,   0.97968,   1.06678,   1.05340,   1.17318,   1.29716,   1.35638,   1.23545,   1.59653,   1.56993,   1.23488,   1.04804,   0.84377,   0.77164,   0.68819,   0.75552,   0.93334,   0.95684,   0.96873,   1.02466,   0.94912,   0.93319,   0.96057,   0.98084,   0.89091,   0.88470,   0.86232,   0.94878,   1.04231,   1.01767,   0.95878,   0.95218,   0.96410,   0.95053,   0.99588,   1.00757,   1.04333,   1.12678,   1.12275,   1.06617,   1.10596,   1.12119,   1.07189,   1.07012,   1.10667,   1.33768,   1.25478,   1.29438,   1.25278,   1.14488,   1.06540,   1.16586,   1.07075,   1.03101,   1.08428,   1.22782,   1.23292,   1.15111,   1.09659,   0.96433,   0.87845]

"""
Get peaks and filter out incorrect ones (low values)
"""
D = findpeaks(data)
for e in D:
	if e > 1.3:	
		print(e)

